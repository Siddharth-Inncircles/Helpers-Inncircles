{
  "_id": {
    "$oid": "68947d4fb5e20f03c9f3a882"
  },
  "employeeCode": "EMP001",
  "name": "Siddharth Diddi",
  "type": "Driver",
  "organization": "KMIT",
  "gender": "Male",
  "language": [
    "English",
    "Telugu",
    "Hindi"
  ],
  "mobileNo": "9876543210",
  "emailId": "siddharthdiddi@gmail.com",
  "joinedOn": {
    "$date": "2025-08-07T10:17:51.632Z"
  },
  "households": 0,
  "vechileType": "Bike",
  "vechileNumber": "AB12AP1209",
  "kycDocument": {
    "data": {
      "$binary": {
        "base64": "JVBERi0xLjQKMSAwIG9iago8PAovVGl0bGUgKP7/
        "subType": "00"
      }
    },
    "filename": "inn-project-helper.pdf",
    "mimetype": "application/pdf"
  },
  "additionalPdfs": [
    {
      "data": {
        "$binary": {
          "base64": "JVBERi0xLjQKMSAwIG9iago8PAovVGl0bGUgKP7
          "subType": "00"
        }
      },
      "filename": "Markdown to PDF.pdf",
      "mimetype": "application/pdf",
      "_id": {
        "$oid": "68947d4fb5e20f03c9f3a883"
      }
    }
  ],
  "profileImage": {
    "data": {
      "$binary": {
        "base64": "/9j/4AAQSkZJRgABAgEASABIAAD/
        "subType": "00"
      }
    },
    "filename": "profile-img.jpg",
    "mimetype": "image/jpeg"
  },
  "createdAt": {
    "$date": "2025-08-07T10:17:51.656Z"
  },
  "updatedAt": {
    "$date": "2025-08-07T10:17:51.656Z"
  },
  "__v": 0
}




















<div class="helper-details-panel">
    <div *ngIf="!selectedHelper && !showAddForm" class="no-selection">
        <mat-icon class="large-icon">person_search</mat-icon>
        <h3>Select a helper to view details</h3>
        <p>Choose a helper from the list to see their complete information</p>
    </div>

    <!-- Helper Details View -->
    <div *ngIf="selectedHelper && !showAddForm && !isEditing" class="helper-details">
        <div class="details-header">
            <div class="helper-profile">
                <div class="profile-avatar">
                    <img 
                        *ngIf="getProfileImageUrl(selectedHelper)" 
                        [src]="getProfileImageUrl(selectedHelper)" 
                        [alt]="selectedHelper.name"
                        class="profile-image"
                        (error)="onImageError($event)"
                    />
                    <mat-icon *ngIf="!getProfileImageUrl(selectedHelper)" class="default-avatar">person</mat-icon>
                </div>
                <div class="profile-info">
                    <h2>{{selectedHelper.name}}</h2>
                    <p class="employee-code">{{selectedHelper.employeeCode}}</p>
                    <span class="service-badge" [class]="'badge-' + selectedHelper.type.toLowerCase()">
                        {{selectedHelper.type}}
                    </span>
                    <div class="helper-status">
                        <span class="status-indicator active"></span>
                        <span class="status-text">Active</span>
                    </div>
                </div>
            </div>
            <div class="action-buttons">
                <button class="custom-btn primary-btn" (click)="generateIdCard()">
                    <mat-icon>badge</mat-icon>
                    Generate ID
                </button>
                <button class="custom-btn secondary-btn" (click)="editHelper()">
                    <mat-icon>edit</mat-icon>
                    Edit
                </button>
                <button class="custom-btn danger-btn" (click)="deleteHelper()">
                    <mat-icon>delete</mat-icon>
                    Delete
                </button>
            </div>
        </div>

        <div class="details-content">
            <!-- Personal Information Section -->
            <div class="detail-section">
                <div class="section-header">
                    <mat-icon>person</mat-icon>
                    <h3>Personal Information</h3>
                </div>
                <div class="detail-grid">
                    <div class="detail-item">
                        <label><mat-icon>wc</mat-icon>Gender</label>
                        <span>{{selectedHelper.gender}}</span>
                    </div>
                    <div class="detail-item">
                        <label><mat-icon>phone</mat-icon>Mobile Number</label>
                        <span>{{selectedHelper.mobileNo}}</span>
                    </div>
                    <div class="detail-item">
                        <label><mat-icon>email</mat-icon>Email ID</label>
                        <span>{{selectedHelper.emailId || 'Not provided'}}</span>
                    </div>
                    <div class="detail-item">
                        <label><mat-icon>language</mat-icon>Languages</label>
                        <span>
                            <span *ngFor="let lang of selectedHelper.language; let last = last" 
                                  class="language-tag">
                                {{lang}}<span *ngIf="!last">, </span>
                            </span>
                        </span>
                    </div>
                </div>
            </div>

            <!-- Work Information Section -->
            <div class="detail-section">
                <div class="section-header">
                    <mat-icon>work</mat-icon>
                    <h3>Work Information</h3>
                </div>
                <div class="detail-grid">
                    <div class="detail-item">
                        <label><mat-icon>business</mat-icon>Organization</label>
                        <span>{{selectedHelper.organization}}</span>
                    </div>
                    <div class="detail-item">
                        <label><mat-icon>calendar_today</mat-icon>Joined On</label>
                        <span>{{selectedHelper.joinedOn | date:'mediumDate'}}</span>
                    </div>
                    <div class="detail-item">
                        <label><mat-icon>home</mat-icon>Households Served</label>
                        <span class="households-count">{{selectedHelper.households}}</span>
                    </div>
                    <div class="detail-item">
                        <label><mat-icon>schedule</mat-icon>Member Since</label>
                        <span>{{getDurationSince(selectedHelper.joinedOn)}}</span>
                    </div>
                </div>
            </div>

            <!-- Vehicle Information Section -->
            <div class="detail-section" *ngIf="selectedHelper.vechileType && selectedHelper.vechileType !== 'None'">
                <div class="section-header">
                    <mat-icon>directions_car</mat-icon>
                    <h3>Vehicle Information</h3>
                </div>
                <div class="detail-grid">
                    <div class="detail-item">
                        <label><mat-icon>two_wheeler</mat-icon>Vehicle Type</label>
                        <span class="vehicle-type">{{selectedHelper.vechileType}}</span>
                    </div>
                    <div class="detail-item" *ngIf="selectedHelper.vechileNumber">
                        <label><mat-icon>pin</mat-icon>Vehicle Number</label>
                        <span class="vehicle-number">{{selectedHelper.vechileNumber}}</span>
                    </div>
                </div>
            </div>

            <!-- Documents Section -->
            <div class="detail-section">
                <div class="section-header">
                    <mat-icon>folder</mat-icon>
                    <h3>Documents</h3>
                </div>
                
                <!-- KYC Document -->
                <div class="document-item" *ngIf="selectedHelper.kycDocument">
                    <div class="document-info">
                        <mat-icon class="document-icon">description</mat-icon>
                        <div class="document-details">
                            <span class="document-name">{{selectedHelper.kycDocument.filename}}</span>
                            <span class="document-type">KYC Document</span>
                        </div>
                    </div>
                    <div class="document-actions">
                        <button class="custom-btn small-btn secondary-btn" 
                                (click)="viewDocument(selectedHelper.kycDocument, 'KYC Document')">
                            <mat-icon>visibility</mat-icon>
                            View
                        </button>
                        <button class="custom-btn small-btn primary-btn" 
                                (click)="downloadDocument(selectedHelper.kycDocument)">
                            <mat-icon>download</mat-icon>
                            Download
                        </button>
                    </div>
                </div>

                <!-- Additional PDFs -->
                <div class="document-item" *ngFor="let pdf of selectedHelper.additionalPdfs; let i = index">
                    <div class="document-info">
                        <mat-icon class="document-icon">picture_as_pdf</mat-icon>
                        <div class="document-details">
                            <span class="document-name">{{pdf.filename}}</span>
                            <span class="document-type">Additional Document {{i + 1}}</span>
                        </div>
                    </div>
                    <div class="document-actions">
                        <button class="custom-btn small-btn secondary-btn" 
                                (click)="viewDocument(pdf, 'Additional Document ' + (i + 1))">
                            <mat-icon>visibility</mat-icon>
                            View
                        </button>
                        <button class="custom-btn small-btn primary-btn" 
                                (click)="downloadDocument(pdf)">
                            <mat-icon>download</mat-icon>
                            Download
                        </button>
                    </div>
                </div>

                <!-- No Documents Message -->
                <div class="no-documents" *ngIf="!selectedHelper.kycDocument && (!selectedHelper.additionalPdfs || selectedHelper.additionalPdfs.length === 0)">
                    <mat-icon>folder_open</mat-icon>
                    <p>No documents uploaded</p>
                </div>
            </div>

            <!-- Timestamps Section -->
            <div class="detail-section">
                <div class="section-header">
                    <mat-icon>info</mat-icon>
                    <h3>System Information</h3>
                </div>
                <div class="detail-grid">
                    <div class="detail-item">
                        <label><mat-icon>add_circle</mat-icon>Created At</label>
                        <span>{{selectedHelper.createdAt | date:'medium'}}</span>
                    </div>
                    <div class="detail-item">
                        <label><mat-icon>update</mat-icon>Last Updated</label>
                        <span>{{selectedHelper.updatedAt | date:'medium'}}</span>
                    </div>
                    <div class="detail-item">
                        <label><mat-icon>fingerprint</mat-icon>Helper ID</label>
                        <span class="helper-id">{{selectedHelper._id}}</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.helper-details-panel {
    height: 100%;
    overflow-y: auto;
    background: #f8f9fa;
}

.no-selection {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    text-align: center;
    color: #6c757d;
}

.no-selection .large-icon {
    font-size: 4rem;
    width: 4rem;
    height: 4rem;
    color: #dee2e6;
    margin-bottom: 1rem;
}

.helper-details {
    padding: 0;
    height: 100%;
}

.details-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    position: sticky;
    top: 0;
    z-index: 10;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.helper-profile {
    display: flex;
    align-items: center;
    gap: 1.5rem;
}

.profile-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    overflow: hidden;
    border: 3px solid rgba(255,255,255,0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255,255,255,0.1);
    flex-shrink: 0;
}

.profile-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.default-avatar {
    font-size: 2.5rem;
    width: 2.5rem;
    height: 2.5rem;
    color: rgba(255,255,255,0.7);
}

.profile-info h2 {
    margin: 0 0 0.5rem 0;
    font-size: 1.8rem;
    font-weight: 600;
}

.employee-code {
    background: rgba(255,255,255,0.2);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    display: inline-block;
    margin-bottom: 0.5rem;
}

.service-badge {
    padding: 0.375rem 0.875rem;
    border-radius: 1rem;
    font-size: 0.875rem;
    font-weight: 600;
    display: inline-block;
    margin-bottom: 0.5rem;
}

.badge-driver { background: #28a745; color: white; }
.badge-nurse { background: #dc3545; color: white; }
.badge-maid { background: #ffc107; color: #212529; }
.badge-cook { background: #fd7e14; color: white; }
.badge-plumber { background: #6f42c1; color: white; }
.badge-laundry { background: #20c997; color: white; }
.badge-newspaper { background: #6c757d; color: white; }

.helper-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 0.5rem;
}

.status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #28a745;
}

.status-text {
    font-size: 0.875rem;
    opacity: 0.9;
}

.action-buttons {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
}

.custom-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.625rem 1.25rem;
    border: none;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.875rem;
}

.custom-btn mat-icon {
    font-size: 1.125rem;
    width: 1.125rem;
    height: 1.125rem;
}

.primary-btn {
    background: #007bff;
    color: white;
}

.primary-btn:hover {
    background: #0056b3;
    transform: translateY(-1px);
}

.secondary-btn {
    background: rgba(255,255,255,0.2);
    color: white;
    border: 1px solid rgba(255,255,255,0.3);
}

.secondary-btn:hover {
    background: rgba(255,255,255,0.3);
    transform: translateY(-1px);
}

.danger-btn {
    background: #dc3545;
    color: white;
}

.danger-btn:hover {
    background: #c82333;
    transform: translateY(-1px);
}

.small-btn {
    padding: 0.375rem 0.75rem;
    font-size: 0.75rem;
}

.small-btn mat-icon {
    font-size: 1rem;
    width: 1rem;
    height: 1rem;
}

.details-content {
    padding: 2rem;
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.detail-section {
    background: white;
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    border: 1px solid #e9ecef;
}

.section-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid #f8f9fa;
}

.section-header mat-icon {
    color: #667eea;
    font-size: 1.5rem;
    width: 1.5rem;
    height: 1.5rem;
}

.section-header h3 {
    margin: 0;
    color: #333;
    font-size: 1.125rem;
    font-weight: 600;
}

.detail-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.detail-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.detail-item label {
    font-weight: 600;
    color: #495057;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.detail-item label mat-icon {
    font-size: 1rem;
    width: 1rem;
    height: 1rem;
    color: #6c757d;
}

.detail-item span {
    color: #333;
    font-size: 0.9375rem;
    padding: 0.5rem 0.75rem;
    background: #f8f9fa;
    border-radius: 0.5rem;
    border: 1px solid #e9ecef;
}

.language-tag {
    background: #e7f3ff;
    color: #0066cc;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    font-weight: 500;
}

.households-count {
    background: #e8f5e8;
    color: #28a745;
    font-weight: 600;
}

.vehicle-type {
    background: #fff3cd;
    color: #856404;
    font-weight: 500;
}

.vehicle-number {
    background: #d4edda;
    color: #155724;
    font-weight: 600;
    font-family: 'Courier New', monospace;
}

.helper-id {
    font-family: 'Courier New', monospace;
    background: #f8f9fa;
    color: #6c757d;
    font-size: 0.75rem;
    word-break: break-all;
}

.document-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 0.5rem;
    border: 1px solid #e9ecef;
    margin-bottom: 1rem;
    transition: all 0.3s ease;
}

.document-item:hover {
    background: #e9ecef;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.document-info {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex: 1;
}

.document-icon {
    color: #dc3545;
    font-size: 1.5rem;
    width: 1.5rem;
    height: 1.5rem;
}

.document-details {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.document-name {
    font-weight: 600;
    color: #333;
    font-size: 0.9375rem;
}

.document-type {
    font-size: 0.8125rem;
    color: #6c757d;
}

.document-actions {
    display: flex;
    gap: 0.5rem;
}

.no-documents {
    text-align: center;
    padding: 2rem;
    color: #6c757d;
}

.no-documents mat-icon {
    font-size: 3rem;
    width: 3rem;
    height: 3rem;
    color: #dee2e6;
    margin-bottom: 1rem;
}

@media (max-width: 768px) {
    .details-header {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }
    
    .helper-profile {
        flex-direction: column;
        text-align: center;
    }
    
    .action-buttons {
        justify-content: center;
    }
    
    .detail-grid {
        grid-template-columns: 1fr;
    }
    
    .document-item {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }
    
    .document-actions {
        justify-content: center;
    }
}
</style>

























import { Component, inject } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { IdCardComponent } from './components/id-card.component';
import { DocumentViewerComponent } from './components/document-viewer.component';

@Component({
  selector: 'app-helper-management',
  // ... other component properties
})
export class HelperManagementComponent {
  private dialog = inject(MatDialog);
  private snackBar = inject(MatSnackBar);

  selectedHelper: any = null;
  showAddForm = false;
  isEditing = false;

  /**
   * Get profile image URL from buffer data
   */
  getProfileImageUrl(helper: any): string | null {
    if (!helper?.profileImage?.data) {
      return null;
    }

    try {
      const base64String = this.bufferToBase64(helper.profileImage.data);
      return `data:${helper.profileImage.mimetype};base64,${base64String}`;
    } catch (error) {
      console.error('Error converting profile image:', error);
      return null;
    }
  }

  /**
   * Handle image load errors
   */
  onImageError(event: any): void {
    event.target.style.display = 'none';
    // You can also set a default image here
    // event.target.src = 'assets/default-avatar.png';
  }

  /**
   * Calculate duration since joined date
   */
  getDurationSince(joinedDate: string | Date): string {
    const joined = new Date(joinedDate);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - joined.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays < 30) {
      return `${diffDays} days`;
    } else if (diffDays < 365) {
      const months = Math.floor(diffDays / 30);
      return `${months} month${months > 1 ? 's' : ''}`;
    } else {
      const years = Math.floor(diffDays / 365);
      const remainingMonths = Math.floor((diffDays % 365) / 30);
      return `${years} year${years > 1 ? 's' : ''} ${remainingMonths > 0 ? remainingMonths + ' month' + (remainingMonths > 1 ? 's' : '') : ''}`;
    }
  }

  /**
   * Generate and display ID card
   */
  generateIdCard(): void {
    if (!this.selectedHelper) {
      this.snackBar.open('No helper selected', 'Close', { duration: 3000 });
      return;
    }

    const dialogRef = this.dialog.open(IdCardComponent, {
      width: '500px',
      maxWidth: '90vw',
      data: { helper: this.selectedHelper },
      panelClass: 'id-card-dialog-panel'
    });

    dialogRef.afterClosed().subscribe(() => {
      console.log('ID card dialog closed');
    });
  }

  /**
   * View document in modal
   */
  viewDocument(document: any, title: string): void {
    try {
      const base64String = this.bufferToBase64(document.data);
      const dataUrl = `data:${document.mimetype};base64,${base64String}`;

      const dialogRef = this.dialog.open(DocumentViewerComponent, {
        width: '80vw',
        height: '90vh',
        maxWidth: '1200px',
        data: {
          title: title,
          filename: document.filename,
          mimetype: document.mimetype,
          dataUrl: dataUrl
        },
        panelClass: 'document-viewer-dialog'
      });

      dialogRef.afterClosed().subscribe(() => {
        console.log('Document viewer closed');
      });
    } catch (error) {
      console.error('Error viewing document:', error);
      this.snackBar.open('Error loading document', 'Close', { duration: 3000 });
    }
  }

  /**
   * Download document
   */
  downloadDocument(document: any): void {
    try {
      const base64String = this.bufferToBase64(document.data);
      const dataUrl = `data:${document.mimetype};base64,${base64String}`;

      // Create download link
      const link = document.createElement('a');
      link.href = dataUrl;
      link.download = document.filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      this.snackBar.open('Document downloaded successfully', 'Close', { duration: 3000 });
    } catch (error) {
      console.error('Error downloading document:', error);
      this.snackBar.open('Error downloading document', 'Close', { duration: 3000 });
    }
  }

  /**
   * Convert buffer to base64 string
   */
  private bufferToBase64(buffer: any): string {
    // Handle MongoDB binary data format
    if (buffer.$binary && buffer.$binary.base64) {
      return buffer.$binary.base64;
    }

    // Handle regular buffer format
    if (typeof buffer === 'string') {
      return buffer;
    }

    // Handle array buffer
    if (Array.isArray(buffer) || buffer.data) {
      const bytes = new Uint8Array(buffer.data || buffer);
      let binary = '';
      bytes.forEach((byte) => binary += String.fromCharCode(byte));
      return btoa(binary);
    }

    throw new Error('Unsupported buffer format');
  }

  /**
   * Edit helper
   */
  editHelper(): void {
    this.isEditing = true;
    // Implement edit logic
  }

  /**
   * Delete helper
   */
  deleteHelper(): void {
    // Implement delete logic with confirmation dialog
    const confirmDialog = this.dialog.open(ConfirmDialogComponent, {
      width: '400px',
      data: {
        title: 'Delete Helper',
        message: `Are you sure you want to delete ${this.selectedHelper.name}? This action cannot be undone.`,
        confirmText: 'Delete',
        cancelText: 'Cancel'
      }
    });

    confirmDialog.afterClosed().subscribe(result => {
      if (result) {
        // Call delete API
        this.performDeleteHelper();
      }
    });
  }

  private performDeleteHelper(): void {
    // Implement actual delete logic here
    console.log('Deleting helper:', this.selectedHelper._id);
    this.snackBar.open('Helper deleted successfully', 'Close', { duration: 3000 });
    this.selectedHelper = null;
  }
}